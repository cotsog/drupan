# -*- coding: utf-8 -*-
"""
    drupan.entity

    Each page / post / snippet / ... is defined as one entity.
"""

import re
from datetime import datetime


class Entity(object):
    """define an entity and all helper methods"""
    def __init__(self, config):
        self.config = config

        self.meta = dict()
        self.raw = None
        self.content = None

        # store results generated by the matching property
        self._slug = None
        self._url = None
        self._created = None
        self._updated = None

    @property
    def layout(self):
        """
        Returns:
            layout for this entity
        """
        return self.meta["layout"]

    @property
    def url(self):
        """
        Returns:
            url for this entity
        """
        if self._url:
            return self._url

    @property
    def slug(self):
        """
        Returns:
            slug based on the title
        """
        if self._slug:
            return self._slug

        clean = re.sub('[^A-Za-z0-9]+', '-', self.meta['title'])

        # multiple '-' do not look nice
        clean = clean.replace('----', '-')
        clean = clean.replace('---', '-')
        clean = clean.replace('--', '-')

        # urls should not start or end with a -
        if clean.endswith("-"):
            clean = clean[:-1]

        if clean.startswith("-"):
            clean = clean[1:]

        clean = clean.lower()

        self._slug = clean
        return self._slug

    @property
    def created(self):
        """
        Returns:
            create date and time as datetime instance
        """
        if self._created:
            return self._created

        raw = self.meta["date"]
        dt = datetime.strptime(raw, "%Y-%m-%d %H:%M")

        self._created = dt
        return self._created

    @property
    def updated(self):
        """
        Returns:
            update date and time as datetime instance
        """
        if self._updated:
            return self._updated

        raw = self.meta.get("updated", None)

        # update timestamp is not required - use the created timestamp
        if not raw:
            self._updated = self.created
            return self._updated

        dt = datetime.strptime(raw, "%Y-%m-%d %H:%M")
        self._updated = dt
        return self._updated
